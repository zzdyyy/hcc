2016年编译技术课程设计

一． 题目（根据以下各难度的题目的说明，选择一个难度系数，点击“抽取题目”获得一份该难度等级的文法） :
　 1.难度系数：1 （低）
　 　目标：完成编译器及解释执行程序，解释执行程序对编译器产生的PCODE能解释执行，产生运行结果
　 　文法：PL/0文法（与教材上的文法略有差别）
　 　优化：无
 　　中间代码：无
 　　目标码：PCODE
 　　评分因子：0.7
　 2.难度系数：2 （中）
　　 目标：完成编译器及解释执行程序，解释执行程序对编译器产生的PCODE能解释执行，产生运行结果
　　 文法：扩充C0文法
　　 优化：无
　　 中间代码：无
　　 目标码：PCODE
　　 评分因子：0.85
　 3.难度系数：3 （高）
　 　目标：实现编译器，生成X86汇编或MIPS汇编
　 　文法： 扩充C0文法（无实型）
　 　优化：基本块内部的公共子表达式删除（DAG图）；
　 　　　　全局寄存器分配（引用计数或着色算法）；
　 　　　　数据流分析（通过活跃变量分析，或利用定义-使用链建网等方法建立冲突图）；
　 　　　　其它优化自选；
　 　　　　代码生成时合理利用临时寄存器（临时寄存器池），并能生成较高质量的目标代码；
　 　中间代码：四元式
　 　目标码：32位X86汇编或MIPS汇编（任选一）
　 　评分因子：1

二．要求
　1. 每人独立完成各次作业，按时提交9项阶段成果和1项最终成果
　2. 采用递归子程序法进行语法分析，所有代码要求手工编程实现
　3. 可以有图形用户界面,或将被编译的源代码文件以带路径的文件名方式从控制台传入
　4. 提交一份包含（但不限于）以下内容的文档（详见《编译技术课程设计大纲及指导书》(2016)）
　　 1) 需求说明
　 　2) 详细设计
　 　3) 操作说明
　 　4) 测试报告
　 　5) 总结感想
　5. 用C/C++语言实现
　6. 开发环境
　　 VS2010或CodeBlocks13.12 
　　 Masm32v11r，Mars4.5 
　7. 提交完整的项目/工程文件，在集成开发环境下可编译运行
　8. 目录命名及组织
　　 阶段成果以”学号_姓名_任务说明”命名提交的文件（或文件夹），压缩为"学号.zip"，提交该zip文件；
　　 最终成果组织为如下三个文件夹 源代码 文档 测试程序
　　 将上述三个文件夹放入以如下规则命名的文件夹中： 学号_姓名[_MIPS|_X86][_申优]（如14061001_×××_申优, 14061001_×××, 14061001__×××_MIPS），再将上述文件夹压缩为"学号.zip"，提交该zip文件。


三．考核
　1. 检查文档内容是否齐全、正确
　2. 将对每份作业的源程序进行编译，编译不通过不能得分；不能正常运行，不能得分
　3. 每份作业将用自己提交的1个测试程序和老师准备的5个测试程序进行测试，根据自备测试程序对文法的覆盖程度和通过的测试点给分，并能根据要求修改测试程序进行测试（测试程序需考虑大小写、函数调用、不同作用域的同名变量、递归调用等方面），记录成绩最高的5个测试程序的得分
　4. 回答老师的现场提问
　5. 申优的同学交一篇申优文章，以指导如何完成课程设计为主要内容，着重说明在课程设计中遇到的各个困难点及所采用的解决方案，要求内容具体，阐述清楚，题目和内容组织自定。注意，文章与前面要求提交的技术文档不同。提交作业的同时提交申优文章。
　6. 若发现程序或文档雷同，按作弊处理
　
四．作业获取和提交
　1. 访问教学辅助平台，以学号登录，获取和提交作业。
　2. 每人最多能3次获取题目（同一难度最多允许2次），以最后一次为准（不保留前一次的记录，不能返回到前一次获取的结果），必须按最后一次获取的题目完成作业。
　3. 请在规定的时间内上网提交作业，逾期将关闭提交通道。在时间允许范围内可多次提交作业，只保留最后一次。

五．参考资料
  　  《编译技术》第17章 第18章，PL/0编译器和Pascal-S编译器源代码
      或《编译原理及编译程序构造》第十四章 第十五章 附录A 附录B
       Compilers: Principles, Techniques, and Tools. By Alfred V. AHO, Ravi SETHI and Jeffrey D.ULLMAN
  　 中文版：编译原理，李建中，姜守旭译，机械工业出版社
　　　　　　编译原理，赵建华，郑滔，戴新宇译，机械工业出版社
　　Advanced Compiler Design and Implementation. By Steven S. Muchnick.
  　 中文版：高级编译器设计与实现，赵克佳，沈志宇译，机械工业出版社

六. 其他说明
　1.首次登录请修改密码，务必填写个人联系信息。
　2.直接生成机器码的可以获得加分。
　3.其他优化，例如复制传播、循环强度削弱等，可以自行选作，成功完成都有加分。
　4.只有难度为“高”的作业才能申优。
　5.《编译技术课程设计大纲及指导书》等参考材料可从从教学平台的“课程信息”->“课件下载”中获取
　6.课程设计成绩公布之前请自行保留作业备份

七.实验指南：
　1. 由于要采用递归子程序法进行语法分析，对不满足条件的文法理论上要进行等价改写；在实现中也可以采用向前查看若干符号的方法。
　2. 对于扩充的语法成分的语义处理可参考教材第10章和Pascal-S源代码






扩充C0文法(原始要求)

＜加法运算符＞ ::= +｜-
＜乘法运算符＞  ::= *｜/
＜关系运算符＞  ::=  <｜<=｜>｜>=｜!=｜==
＜字母＞   ::= ＿｜a｜．．．｜z｜A｜．．．｜Z
＜数字＞   ::= ０｜＜非零数字＞
＜非零数字＞  ::= １｜．．．｜９
＜字符＞    ::=  '＜加法运算符＞'｜'＜乘法运算符＞'｜'＜字母＞'｜'＜数字＞'
＜字符串＞   ::=  "｛十进制编码为32,33,35-126的ASCII字符｝"
＜程序＞    ::= ［＜常量说明＞］［＜变量说明＞］{＜有返回值函数定义＞|＜无返回值函数定义＞}＜主函数＞
＜常量说明＞ ::=  const＜常量定义＞;{ const＜常量定义＞;}
＜常量定义＞   ::=   int＜标识符＞＝＜整数＞{,＜标识符＞＝＜整数＞}
                               | char＜标识符＞＝＜字符＞{,＜标识符＞＝＜字符＞}
＜无符号整数＞  ::= ＜非零数字＞｛＜数字＞｝| 0
＜整数＞        ::= ［＋｜－］＜无符号整数＞
＜标识符＞    ::=  ＜字母＞｛＜字母＞｜＜数字＞｝
＜声明头部＞   ::=  int＜标识符＞ |char＜标识符＞
＜变量说明＞  ::= ＜变量定义＞;{＜变量定义＞;}
＜变量定义＞  ::= ＜类型标识符＞(＜标识符＞|＜标识符＞'['＜无符号整数＞']'){,(＜标识符＞|＜标识符＞'['＜无符号整数＞']' )} //＜无符号整数＞表示数组元素的个数，其值需大于0
＜常量＞   ::=  ＜整数＞|＜字符＞
＜类型标识符＞      ::=  int | char
＜有返回值函数定义＞  ::=  ＜声明头部＞'('＜参数表＞')' '{'＜复合语句＞'}'
＜无返回值函数定义＞  ::= void＜标识符＞'('＜参数表＞')''{'＜复合语句＞'}'
＜复合语句＞   ::=  ［＜常量说明＞］［＜变量说明＞］＜语句列＞
＜参数表＞    ::= ＜参数＞{,＜参数＞}| ＜空>
＜参数＞    ::=  ＜类型标识符＞＜标识符＞
＜主函数＞    ::= void main'('')''{'＜复合语句＞'}'
＜表达式＞    ::= ［＋｜－］＜项＞{＜加法运算符＞＜项＞}   //[+|-]只作用于第一个<项>
＜项＞     ::= ＜因子＞{＜乘法运算符＞＜因子＞}
＜因子＞    ::= ＜标识符＞｜＜标识符＞'['＜表达式＞']'|'('＜表达式＞')'｜＜整数＞|＜字符＞｜＜有返回值函数调用语句＞         
＜语句＞    ::= ＜条件语句＞｜＜循环语句＞| '{'＜语句列＞'}'| ＜有返回值函数调用语句＞; 
                           |＜无返回值函数调用语句＞;｜＜赋值语句＞;｜＜读语句＞;｜＜写语句＞;｜＜空＞;|＜情况语句＞｜＜返回语句＞;
＜赋值语句＞   ::=  ＜标识符＞＝＜表达式＞|＜标识符＞'['＜表达式＞']'=＜表达式＞
＜条件语句＞  ::=  if '('＜条件＞')'＜语句＞
＜条件＞    ::=  ＜表达式＞＜关系运算符＞＜表达式＞｜＜表达式＞ //表达式为0条件为假，否则为真
＜循环语句＞   ::=  while '('＜条件＞')'＜语句＞
＜情况语句＞  ::=  switch '('＜表达式＞')' '{'＜情况表＞＜缺省＞ '}'
＜情况表＞   ::=  ＜情况子语句＞{＜情况子语句＞}
＜情况子语句＞  ::=  case＜常量＞：＜语句＞
＜缺省＞   ::=  default : ＜语句＞|＜空＞
＜有返回值函数调用语句＞ ::= ＜标识符＞'('＜值参数表＞')'
＜无返回值函数调用语句＞ ::= ＜标识符＞'('＜值参数表＞')'
＜值参数表＞   ::= ＜表达式＞{,＜表达式＞}｜＜空＞
＜语句列＞   ::= ｛＜语句＞｝
＜读语句＞    ::=  scanf '('＜标识符＞{,＜标识符＞}')'
＜写语句＞    ::= printf '(' ＜字符串＞,＜表达式＞ ')'| printf '('＜字符串＞ ')'| printf '('＜表达式＞')'
＜返回语句＞   ::=  return['('＜表达式＞')']     


附加说明：

（1）char类型的变量或常量，用字符的ASCII码对应的整数参加运算

（2）标识符区分大小写字母

（3）写语句中，字符串原样输出，单个char类型的变量或常量输出字符，其他表达式按整型输出

（4）情况语句中，switch后面的表达式和case后面的常量只允许出现int和char类型；每个情况子语句执行完毕后，不继续执行后面的情况子语句

（5）数组的下标从0开始